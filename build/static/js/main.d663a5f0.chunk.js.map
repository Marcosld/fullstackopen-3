{"version":3,"sources":["App.js","services/persons.js","serviceWorker.js","index.js"],"names":["Filter","value","onUpdate","onChange","PersonForm","onNewPerson","useState","name","setName","number","setNumber","onSubmit","e","preventDefault","target","type","Person","onDelete","onClick","Persons","persons","filter","toUpperCase","includes","map","id","key","Notification","notification","className","message","App","setPersons","setFilter","setNotification","useEffect","axios","get","then","data","onUpdatePerson","window","confirm","person","put","update","updatedPerson","reduce","updatedPersons","concat","setTimeout","catch","existingPerson","find","post","response","error","delete","remove","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d663a5f0.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {add, getAll, remove, update} from './services/persons'\nimport './App.css'\n\nconst Filter = ({value, onUpdate}) =>\n    <div>\n        filter shown with <input value={value} onChange={onUpdate} />\n    </div>\n\nconst PersonForm = ({onNewPerson}) => {\n    const [ name, setName ] = useState('')\n    const [ number, setNumber ] = useState('')\n\n    const handlerInputName = e => setName(e.target.value)\n    const handlerInputNumber = e => setNumber(e.target.value)\n    const handlerForm = e => {\n        e.preventDefault();\n        onNewPerson({name, number})\n        setName('')\n        setNumber('')\n    }\n\n    return (\n        <form onSubmit={handlerForm}>\n            <div>\n                name: <input value={name} onChange={handlerInputName}/>\n            </div>\n            <div>\n                number: <input value={number} onChange={handlerInputNumber}/>\n            </div>\n            <div>\n                <button type=\"submit\">Add</button>\n            </div>\n        </form>\n    )\n}\n\nconst Person = ({name, number, onDelete}) =>\n    <>\n        <p>{name} {number}</p>\n        <button onClick={onDelete}>delete</button>\n    </>\n\nconst Persons = ({persons, filter, onDelete}) => persons\n    .filter(({name}) => name.toUpperCase().includes(filter.toUpperCase()))\n    .map(({name, number, id}) => <Person key={id} name={name} number={number} onDelete={() => onDelete(id, name)}/>)\n\nconst Notification = ({ notification }) => {\n    if (!notification) {\n        return null\n    }\n\n    return (\n        <div className={notification.type}>\n            {notification.message}\n        </div>\n    )\n}\n\nconst App = () => {\n    const [ persons, setPersons] = useState([])\n    const [ filter, setFilter ] = useState('')\n    const [ notification, setNotification ] = useState(null)\n\n    useEffect(() => {\n        getAll().then(persons => setPersons(persons))\n    }, [])\n\n    const handlerInputFilter = e => setFilter(e.target.value)\n    const onNewPerson = ({name, number}) => {\n        const existingPerson = persons.find(person => person.name === name)\n        if (!existingPerson) {\n            add({name, number})\n                .then(person => {\n                    setPersons([...persons, person])\n                    setNotification({type: 'success', message: `Added ${person.name}!`})\n                    setTimeout(() => setNotification(null), 2000);\n                })\n                .catch(({response}) => {\n                    setNotification({type: 'error', message: response.data.error})\n                    setTimeout(() => setNotification(null), 2000);\n                })\n        } else {\n            onUpdatePerson({name, id: existingPerson.id, number})\n        }\n    }\n    const onDeletePerson = (id, name) => {\n        if (window.confirm(`Delete ${name}?`)) {\n            remove(id).then(() => setPersons(persons.filter((person) => person.id !== id)))\n        }\n    }\n    const onUpdatePerson = ({name, id, number}) => {\n        if (window.confirm(`${name} is already on the phonebook. Update phone number?`)) {\n            update(id, {name, number}).then(\n                updatedPerson => {\n                    setPersons(\n                        persons.reduce(\n                            (updatedPersons, person) => updatedPersons.concat(person.id !== updatedPerson.id ? person : updatedPerson)\n                            , []\n                        )\n                    )\n                    setNotification({type: 'success', message: `Updated ${name}!`})\n                    setTimeout(() => setNotification(null), 2000);\n                }\n            ).catch(() => {\n                setNotification({type: 'error', message: `Information of ${name} already deleted from server`})\n            })\n        }\n    }\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification notification={notification}/>\n            <Filter value={filter} onUpdate={handlerInputFilter}/>\n            <h2>Add a new</h2>\n            <PersonForm onNewPerson={onNewPerson}/>\n            <h2>Numbers</h2>\n            <Persons filter={filter} persons={persons} onDelete={onDeletePerson} />\n        </div>\n    )\n}\n\nexport default App\n","import axios from 'axios'\n\nconst resource = '/api/persons'\n\nexport const getAll = () => axios.get(resource)\n    .then(({data}) => data)\n\nexport const add = person => axios.post(resource, person)\n    .then(({data}) => data)\n\nexport const remove = id => axios.delete(`${resource}/${id}`)\n\nexport const update = (id, person) => axios.put(`${resource}/${id}`, person)\n    .then(({data}) => data)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}